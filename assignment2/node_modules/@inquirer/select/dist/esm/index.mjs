import { createPrompt, useState, useKeypress, usePrefix, usePagination, useRef, isEnterKey, isUpKey, isDownKey, isNumberKey, Separator, } from '@inquirer/core';
import chalk from 'chalk';
import figures from 'figures';
import ansiEscapes from 'ansi-escapes';
function isSelectable(item) {
    return !Separator.isSeparator(item) && !item.disabled;
}
function renderItem({ item, isActive }) {
    if (Separator.isSeparator(item)) {
        return ` ${item.separator}`;
    }
    const line = item.name || item.value;
    if (item.disabled) {
        const disabledLabel = typeof item.disabled === 'string' ? item.disabled : '(disabled)';
        return chalk.dim(`- ${line} ${disabledLabel}`);
    }
    const color = isActive ? chalk.cyan : (x) => x;
    const prefix = isActive ? figures.pointer : ` `;
    return color(`${prefix} ${line}`);
}
export default createPrompt((config, done) => {
    const { choices: items, pageSize } = config;
    const firstRender = useRef(true);
    const prefix = usePrefix();
    const [status, setStatus] = useState('pending');
    const [active, setActive] = useState(() => {
        const selected = items.findIndex(isSelectable);
        if (selected < 0)
            throw new Error('[select prompt] No selectable choices. All choices are disabled.');
        return selected;
    });
    // Safe to assume the cursor position always point to a Choice.
    const selectedChoice = items[active];
    useKeypress((key) => {
        if (isEnterKey(key)) {
            setStatus('done');
            done(selectedChoice.value);
        }
        else if (isUpKey(key) || isDownKey(key)) {
            const offset = isUpKey(key) ? -1 : 1;
            let next = active;
            do {
                next = (next + offset + items.length) % items.length;
            } while (!isSelectable(items[next]));
            setActive(next);
        }
        else if (isNumberKey(key)) {
            const position = Number(key.name) - 1;
            const item = items[position];
            if (item == null || !isSelectable(item))
                return;
            setActive(position);
        }
    });
    let message = chalk.bold(config.message);
    if (firstRender.current) {
        firstRender.current = false;
        message += chalk.dim(' (Use arrow keys)');
    }
    const lines = items
        .map((item, index) => renderItem({ item, isActive: index === active }))
        .join('\n');
    const page = usePagination(lines, {
        active,
        pageSize,
    });
    if (status === 'done') {
        return `${prefix} ${message} ${chalk.cyan(selectedChoice.name || selectedChoice.value)}`;
    }
    const choiceDescription = selectedChoice.description
        ? `\n${selectedChoice.description}`
        : ``;
    return `${prefix} ${message}\n${page}${choiceDescription}${ansiEscapes.cursorHide}`;
});
export { Separator };
